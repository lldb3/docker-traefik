version: "3.9"

########################### SECRETS
secrets:
  ovh_endpoint:
    file: "$DOCKERDIR/secrets/ovh_endpoint"
  ovh_application_key:
    file: "$DOCKERDIR/secrets/ovh_application_key"
  ovh_application_secret:
    file: "$DOCKERDIR/secrets/ovh_application_secret"
  ovh_consumer_key:
    file: "$DOCKERDIR/secrets/ovh_consumer_key"

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  traefik:
    container_name: "traefik"
    image: "traefik:v2.5"
    restart: always
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - --entryPoints.traefik.address=:8080
      # Allow these IPs to set the X-Forwarded-* headers for load balancing / proxy use
      # - --entrypoints.https.forwardedHeaders.trustedIPs=
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100000 # Configuring a buffer of X lines
      - --accessLog.filters.statusCodes=400-499,500-599 # filter on not found and errors
      ## Providers Docker / Socket Proxy
      - --providers.docker=true
      - --providers.docker.network=t2_proxy
      #- --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      #- --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      ## TLS Options for security (A+)
      - --entrypoints.websecure.http.tls.options=tls-opts@file
      # Add OVH-resolver as default for all services. Enables the use of TLS on all services
      - --entrypoints.websecure.http.tls.certresolver=ovh-resolver
      - --entrypoints.websecure.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.websecure.http.tls.domains[0].sans=*.$DOMAINNAME
      ## DNS Challenge settings
      - --certificatesresolvers.ovh-resolver.acme.dnschallenge=true
      - --certificatesresolvers.ovh-resolver.acme.dnschallenge.provider=ovh
      # - --certificatesresolvers.ovh-resolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.ovh-resolver.acme.email=$CERT_POSTMASTER_MAIL
      - --certificatesresolvers.ovh-resolver.acme.storage=/acme/acme.json
      - --certificatesresolvers.ovh-resolver.acme.dnsChallenge.delayBeforeCheck=10
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    security_opt:
      - no-new-privileges:true
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/traefik2/acme:/acme
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - TZ=$TZ
      - OVH_ENDPOINT_FILE=/run/secrets/ovh_endpoint
      - OVH_APPLICATION_KEY_FILE=/run/secrets/ovh_application_key
      - OVH_APPLICATION_SECRET_FILE=/run/secrets/ovh_application_secret
      - OVH_CONSUMER_KEY_FILE=/run/secrets/ovh_consumer_key
    secrets:
      - ovh_endpoint
      - ovh_application_key
      - ovh_application_secret
      - ovh_consumer_key
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - traefik.http.routers.traefik-rtr.entrypoints=websecure
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)
      ## Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal 
      ## Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: always
    # profiles:
    # - core
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    privileged: true
    ports:
    - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portaienr
      - VOLUMES=1 # Portainer

  nginx:
    image: linuxserver/nginx
    container_name: nginx
    depends_on:
      - traefik
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
        - TZ=$TZ
        - PUID=1000
        - PGID=1000
    restart: unless-stopped
    labels:
        - traefik.enable=true
        - traefik.http.routers.nginx.rule=(Host(`$DOMAINNAME`))
        - traefik.http.routers.nginx.entrypoints=websecure
        - traefik.http.routers.nginx.middlewares=chain-no-auth@file

