version: "3.6"

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

########################### SECRETS
secrets:
  ovh_endpoint:
    file: "$DOCKERDIR/secrets/ovh_endpoint"
  ovh_application_key:
    file: "$DOCKERDIR/secrets/ovh_application_key"
  ovh_application_secret:
    file: "$DOCKERDIR/secrets/ovh_application_secret"
  ovh_consumer_key:
    file: "$DOCKERDIR/secrets/ovh_consumer_key"

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  # default:
  #   driver: bridge
  # socket_proxy:
  #   name: socket_proxy
  #   driver: bridge
  #   ipam:
  #     config:
  #       - subnet: 192.168.91.0/24

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  traefik:
    image: "traefik:v2.5"
    #restart: always
    container_name: "traefik"
    networks:
      - t2_proxy
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      - --log=true
      #- --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=1000 # Configuring a buffer of 1000 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.network=t2_proxy
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      - --certificatesresolvers.ovh-resolver.acme.dnschallenge=true
      - --certificatesresolvers.ovh-resolver.acme.dnschallenge.provider=ovh
      # - --certificatesresolvers.ovh-resolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.ovh-resolver.acme.email=postmaster@meln.ovh
      - --certificatesresolvers.ovh-resolver.acme.storage=/acme/acme.json
      - --certificatesresolvers.ovh-resolver.acme.dnsChallenge.delayBeforeCheck=10
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    secrets:
      - ovh_endpoint
      - ovh_application_key
      - ovh_application_secret
      - ovh_consumer_key
    security_opt:
      - no-new-privileges:true # no new privileges gained by containers
    environment:
      - TZ=$TZ
      - OVH_ENDPOINT_FILE=/run/secrets/ovh_endpoint
      - OVH_APPLICATION_KEY_FILE=/run/secrets/ovh_application_key
      - OVH_APPLICATION_SECRET_FILE=/run/secrets/ovh_application_secret
      - OVH_CONSUMER_KEY_FILE=/run/secrets/ovh_consumer_key
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme:/acme
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # HTTP Routers
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)
      - traefik.http.routers.traefik-rtr.tls=true
      #- traefik.http.routers.traefik-rtr.tls.certresolver=ovh-resolver # Comment out this line after first run of traefik to force the use of wildcard certs
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
#      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal 
      ## Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file,middlewares-secure-headers@file

# Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
     - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data 
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`) || (Host(`portainer.$DOMAINNAME`) && PathPrefix(`/api`))"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
     # - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
#       - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  rest-server:
    container_name: rest-server
    image: restic/rest-server:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
     - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/rest-server/data:/data 
    environment:
      - OPTIONS= --private-repos --append-only --path=/data
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.restic-rtr.entrypoints=https"
      - "traefik.http.routers.restic-rtr.rule=Host(`restic.$DOMAINNAME`)"
      - "traefik.http.routers.restic-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.restic-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.restic-rtr.service=restic-svc"
      - "traefik.http.services.restic-svc.loadbalancer.server.port=8000"